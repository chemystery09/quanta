"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/multipart-parser.node.ts
var multipart_parser_node_exports = {};
__export(multipart_parser_node_exports, {
  MaxFileSizeExceededError: () => MaxFileSizeExceededError,
  MaxHeaderSizeExceededError: () => MaxHeaderSizeExceededError,
  MultipartParseError: () => MultipartParseError,
  MultipartParser: () => MultipartParser,
  MultipartPart: () => MultipartPart,
  getMultipartBoundary: () => getMultipartBoundary,
  isMultipartRequest: () => isMultipartRequest,
  parseMultipart: () => parseMultipart2,
  parseMultipartRequest: () => parseMultipartRequest
});
module.exports = __toCommonJS(multipart_parser_node_exports);

// src/lib/multipart.ts
var import_headers = __toESM(require("@mjackson/headers"), 1);

// src/lib/read-stream.ts
async function* readStream(stream) {
  let reader = stream.getReader();
  while (true) {
    const { done, value } = await reader.read();
    if (done) break;
    yield value;
  }
}

// src/lib/buffer-search.ts
function createSearch(pattern) {
  let needle = new TextEncoder().encode(pattern);
  let search;
  if ("Buffer" in globalThis && !("Bun" in globalThis || "Deno" in globalThis)) {
    search = (haystack, start = 0) => Buffer.prototype.indexOf.call(haystack, needle, start);
  } else {
    let needleEnd = needle.length - 1;
    let skipTable = new Uint8Array(256).fill(needle.length);
    for (let i = 0; i < needleEnd; ++i) {
      skipTable[needle[i]] = needleEnd - i;
    }
    search = (haystack, start = 0) => {
      let haystackLength = haystack.length;
      let i = start + needleEnd;
      while (i < haystackLength) {
        for (let j = needleEnd, k = i; j >= 0 && haystack[k] === needle[j]; --j, --k) {
          if (j === 0) return k;
        }
        i += skipTable[haystack[i]];
      }
      return -1;
    };
  }
  return search;
}
function createPartialTailSearch(pattern) {
  let needle = new TextEncoder().encode(pattern);
  let byteIndexes = {};
  for (let i = 0; i < needle.length; ++i) {
    let byte = needle[i];
    if (byteIndexes[byte] === void 0) byteIndexes[byte] = [];
    byteIndexes[byte].push(i);
  }
  return function(haystack) {
    let haystackEnd = haystack.length - 1;
    if (haystack[haystackEnd] in byteIndexes) {
      let indexes = byteIndexes[haystack[haystackEnd]];
      for (let i = indexes.length - 1; i >= 0; --i) {
        for (let j = indexes[i], k = haystackEnd; j >= 0 && haystack[k] === needle[j]; --j, --k) {
          if (j === 0) return k;
        }
      }
    }
    return -1;
  };
}

// src/lib/multipart.ts
var MultipartParseError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "MultipartParseError";
  }
};
var MaxHeaderSizeExceededError = class extends MultipartParseError {
  constructor(maxHeaderSize) {
    super(`Multipart header size exceeds maximum allowed size of ${maxHeaderSize} bytes`);
    this.name = "MaxHeaderSizeExceededError";
  }
};
var MaxFileSizeExceededError = class extends MultipartParseError {
  constructor(maxFileSize) {
    super(`File size exceeds maximum allowed size of ${maxFileSize} bytes`);
    this.name = "MaxFileSizeExceededError";
  }
};
async function parseMultipart(message, options, handler) {
  let parser = new MultipartParser(options.boundary, {
    maxHeaderSize: options.maxHeaderSize,
    maxFileSize: options.maxFileSize
  });
  await parser.parse(message, handler);
}
var findDoubleNewline = createSearch("\r\n\r\n");
var MultipartParserStateStart = 0;
var MultipartParserStateAfterBoundary = 1;
var MultipartParserStateHeader = 2;
var MultipartParserStateBody = 3;
var MultipartParserStateDone = 4;
var MultipartParser = class {
  boundary;
  maxHeaderSize;
  maxFileSize;
  #findOpeningBoundary;
  #openingBoundaryLength;
  #findBoundary;
  #findPartialTailBoundary;
  #boundaryLength;
  #state = MultipartParserStateStart;
  #buffer = null;
  #bodyController = null;
  #bodyLength = 0;
  constructor(boundary, options) {
    this.boundary = boundary;
    this.maxHeaderSize = options?.maxHeaderSize ?? 8 * 1024;
    this.maxFileSize = options?.maxFileSize ?? Infinity;
    this.#findOpeningBoundary = createSearch(`--${boundary}`);
    this.#openingBoundaryLength = 2 + boundary.length;
    this.#findBoundary = createSearch(`\r
--${boundary}`);
    this.#findPartialTailBoundary = createPartialTailSearch(`\r
--${boundary}`);
    this.#boundaryLength = 4 + boundary.length;
  }
  /**
   * Parse a stream/buffer multipart message and call the given handler for each part it contains.
   * Resolves when the parse is finished and all handlers resolve.
   */
  async parse(message, handler) {
    if (this.#state !== MultipartParserStateStart) {
      this.#reset();
    }
    let promises = [];
    function handlePart(part) {
      let result = handler(part);
      if (isPromise(result)) {
        promises.push(result);
        result.catch(() => {
        });
      }
    }
    if (message instanceof ReadableStream) {
      for await (let chunk of readStream(message)) {
        this.#write(chunk, handlePart);
      }
    } else if (isAsyncIterable(message)) {
      for await (let chunk of message) {
        this.#write(chunk, handlePart);
      }
    } else if (message instanceof Uint8Array) {
      this.#write(message, handlePart);
    } else if (isIterable(message)) {
      for (let chunk of message) {
        this.#write(chunk, handlePart);
      }
    } else {
      throw new TypeError("Cannot parse multipart message; expected a stream or buffer");
    }
    if (this.#state !== MultipartParserStateDone) {
      throw new MultipartParseError("Unexpected end of stream");
    }
    await Promise.all(promises);
  }
  #reset() {
    this.#state = MultipartParserStateStart;
    this.#buffer = null;
    this.#bodyController = null;
    this.#bodyLength = 0;
  }
  #write(chunk, handler) {
    if (this.#state === MultipartParserStateDone) {
      throw new MultipartParseError("Unexpected data after end of stream");
    }
    let index = 0;
    let chunkLength = chunk.length;
    if (this.#buffer !== null) {
      let newChunk = new Uint8Array(this.#buffer.length + chunkLength);
      newChunk.set(this.#buffer, 0);
      newChunk.set(chunk, this.#buffer.length);
      chunk = newChunk;
      chunkLength = chunk.length;
      this.#buffer = null;
    }
    while (true) {
      if (this.#state === MultipartParserStateBody) {
        if (chunkLength - index < this.#boundaryLength) {
          this.#buffer = chunk.subarray(index);
          break;
        }
        let boundaryIndex = this.#findBoundary(chunk, index);
        if (boundaryIndex === -1) {
          let partialTailIndex = this.#findPartialTailBoundary(chunk);
          if (partialTailIndex === -1) {
            this.#writeBody(index === 0 ? chunk : chunk.subarray(index));
          } else {
            this.#writeBody(chunk.subarray(index, partialTailIndex));
            this.#buffer = chunk.subarray(partialTailIndex);
          }
          break;
        }
        this.#writeBody(chunk.subarray(index, boundaryIndex));
        this.#closeBody();
        index = boundaryIndex + this.#boundaryLength;
        this.#state = MultipartParserStateAfterBoundary;
      }
      if (this.#state === MultipartParserStateAfterBoundary) {
        if (chunkLength - index < 2) {
          this.#buffer = chunk.subarray(index);
          break;
        }
        if (chunk[index] === 45 && chunk[index + 1] === 45) {
          this.#state = MultipartParserStateDone;
          break;
        }
        index += 2;
        this.#state = MultipartParserStateHeader;
      }
      if (this.#state === MultipartParserStateHeader) {
        if (chunkLength - index < 4) {
          this.#buffer = chunk.subarray(index);
          break;
        }
        let headerEndIndex = findDoubleNewline(chunk, index);
        if (headerEndIndex === -1) {
          if (chunkLength - index > this.maxHeaderSize) {
            throw new MaxHeaderSizeExceededError(this.maxHeaderSize);
          }
          this.#buffer = chunk.subarray(index);
          break;
        }
        if (headerEndIndex - index > this.maxHeaderSize) {
          throw new MaxHeaderSizeExceededError(this.maxHeaderSize);
        }
        let header = chunk.subarray(index, headerEndIndex);
        let part = new MultipartPart(
          header,
          new ReadableStream({
            start: (controller) => {
              this.#bodyController = controller;
              this.#bodyLength = 0;
            }
          })
        );
        handler(part);
        index = headerEndIndex + 4;
        this.#state = MultipartParserStateBody;
        continue;
      }
      if (this.#state === MultipartParserStateStart) {
        if (chunkLength < this.#openingBoundaryLength) {
          this.#buffer = chunk;
          break;
        }
        if (this.#findOpeningBoundary(chunk) !== 0) {
          throw new MultipartParseError("Invalid multipart stream: missing initial boundary");
        }
        index = this.#openingBoundaryLength;
        this.#state = MultipartParserStateAfterBoundary;
      }
    }
  }
  #writeBody(chunk) {
    if (this.#bodyLength + chunk.length > this.maxFileSize) {
      let error = new MaxFileSizeExceededError(this.maxFileSize);
      this.#bodyController.error(error);
      throw error;
    }
    this.#bodyController.enqueue(chunk);
    this.#bodyLength += chunk.length;
  }
  #closeBody() {
    this.#bodyController.close();
    this.#bodyController = null;
  }
};
function isIterable(value) {
  return typeof value === "object" && value != null && Symbol.iterator in value;
}
function isAsyncIterable(value) {
  return typeof value === "object" && value != null && Symbol.asyncIterator in value;
}
function isPromise(value) {
  return typeof value === "object" && value != null && typeof value.then === "function";
}
var MultipartPart = class {
  #header;
  #body;
  #headers;
  #bodyUsed = false;
  constructor(header, body) {
    this.#header = header;
    this.#body = body;
  }
  /**
   * The content of this part as an `ArrayBuffer`.
   */
  async arrayBuffer() {
    return (await this.bytes()).buffer;
  }
  /**
   * The body of this part as a `ReadableStream<Uint8Array>`. In `multipart/form-data` messages, this is useful
   * for streaming the value of files that were uploaded using `<input type="file">` fields.
   */
  get body() {
    return this.#body;
  }
  /**
   * Whether the body of this part has been consumed.
   */
  get bodyUsed() {
    return this.#bodyUsed;
  }
  /**
   * The body of this part buffered into a single `Uint8Array`. In `multipart/form-data` messages, this is useful
   * for reading the value of files that were uploaded using `<input type="file">` fields.
   */
  async bytes() {
    if (this.#bodyUsed) {
      throw new Error("Body is already consumed or is being consumed");
    }
    this.#bodyUsed = true;
    let chunks = [];
    let totalLength = 0;
    for await (let chunk of readStream(this.#body)) {
      chunks.push(chunk);
      totalLength += chunk.length;
    }
    let result = new Uint8Array(totalLength);
    let offset = 0;
    for (let chunk of chunks) {
      result.set(chunk, offset);
      offset += chunk.length;
    }
    return result;
  }
  /**
   * The headers associated with this part.
   */
  get headers() {
    if (!this.#headers) {
      this.#headers = new import_headers.default(new TextDecoder().decode(this.#header));
    }
    return this.#headers;
  }
  /**
   * True if this part originated from a file upload.
   */
  get isFile() {
    return this.filename !== void 0 || this.mediaType === "application/octet-stream";
  }
  /**
   * The filename of the part, if it is a file upload.
   */
  get filename() {
    return this.headers.contentDisposition.preferredFilename;
  }
  /**
   * The media type of the part.
   */
  get mediaType() {
    return this.headers.contentType.mediaType;
  }
  /**
   * The name of the part, usually the `name` of the field in the `<form>` that submitted the request.
   */
  get name() {
    return this.headers.contentDisposition.name;
  }
  /**
   * The body of the part as a string. In `multipart/form-data` messages, this is useful for reading the value
   * of parts that originated from `<input type="text">` fields.
   *
   * Note: Do not use this for binary data, use `await part.bytes()` or stream `part.body` directly instead.
   */
  async text() {
    return new TextDecoder().decode(await this.bytes());
  }
};

// src/lib/multipart-request.ts
function getMultipartBoundary(contentType) {
  let match = /boundary=(?:"([^"]+)"|([^;]+))/i.exec(contentType);
  return match ? match[1] ?? match[2] : null;
}

// src/lib/multipart.node.ts
var import_node_stream = require("stream");
function isMultipartRequest(req) {
  let contentType = req.headers["content-type"];
  return contentType != null && /^multipart\//i.test(contentType);
}
async function parseMultipartRequest(req, options, handler) {
  if (typeof options === "function") {
    handler = options;
    options = {};
  }
  if (!isMultipartRequest(req)) {
    throw new MultipartParseError("Request is not a multipart request");
  }
  let boundary = getMultipartBoundary(req.headers["content-type"]);
  if (!boundary) {
    throw new MultipartParseError("Invalid Content-Type header: missing boundary");
  }
  await parseMultipart2(
    req,
    { boundary, maxHeaderSize: options.maxHeaderSize, maxFileSize: options.maxFileSize },
    handler
  );
}
async function parseMultipart2(message, options, handler) {
  if (message instanceof import_node_stream.Readable) {
    await parseMultipart(import_node_stream.Readable.toWeb(message), options, handler);
  } else {
    await parseMultipart(
      message,
      options,
      handler
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MaxFileSizeExceededError,
  MaxHeaderSizeExceededError,
  MultipartParseError,
  MultipartParser,
  MultipartPart,
  getMultipartBoundary,
  isMultipartRequest,
  parseMultipart,
  parseMultipartRequest
});
