interface HeaderValue {
    toString(): string;
}

type AcceptInit = Iterable<string | [string, number]> | Record<string, number>;
/**
 * The value of a `Accept` HTTP header.
 *
 * [MDN `Accept` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept)
 *
 * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2)
 */
declare class Accept implements HeaderValue, Iterable<[string, number]> {
    #private;
    constructor(init?: string | AcceptInit);
    /**
     * An array of all media types in the header.
     */
    get mediaTypes(): string[];
    /**
     * An array of all weights (q values) in the header.
     */
    get weights(): number[];
    /**
     * The number of media types in the `Accept` header.
     */
    get size(): number;
    /**
     * Returns `true` if the header matches the given media type (i.e. it is "acceptable").
     * @param mediaType The media type to check.
     * @returns `true` if the media type is acceptable, `false` otherwise.
     */
    accepts(mediaType: string): boolean;
    /**
     * Gets the weight of a given media type. Also supports wildcards, so e.g. `text/*` will match `text/html`.
     * @param mediaType The media type to get the weight of.
     * @returns The weight of the media type.
     */
    getWeight(mediaType: string): number;
    /**
     * Returns the most preferred media type from the given list of media types.
     * @param mediaTypes The list of media types to choose from.
     * @returns The most preferred media type or `null` if none match.
     */
    getPreferred(mediaTypes: string[]): string | null;
    /**
     * Returns the weight of a media type. If it is not in the header verbatim, this returns `null`.
     * @param mediaType The media type to get the weight of.
     * @returns The weight of the media type, or `null` if it is not in the header.
     */
    get(mediaType: string): number | null;
    /**
     * Sets a media type with the given weight.
     * @param mediaType The media type to set.
     * @param weight The weight of the media type. Defaults to 1.
     */
    set(mediaType: string, weight?: number): void;
    /**
     * Removes the given media type from the header.
     * @param mediaType The media type to remove.
     */
    delete(mediaType: string): void;
    /**
     * Checks if a media type is in the header.
     * @param mediaType The media type to check.
     * @returns `true` if the media type is in the header (verbatim), `false` otherwise.
     */
    has(mediaType: string): boolean;
    /**
     * Removes all media types from the header.
     */
    clear(): void;
    entries(): IterableIterator<[string, number]>;
    [Symbol.iterator](): IterableIterator<[string, number]>;
    forEach(callback: (mediaType: string, weight: number, header: Accept) => void, thisArg?: any): void;
    toString(): string;
}

type AcceptEncodingInit = Iterable<string | [string, number]> | Record<string, number>;
/**
 * The value of a `Accept-Encoding` HTTP header.
 *
 * [MDN `Accept-Encoding` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding)
 *
 * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.4)
 */
declare class AcceptEncoding implements HeaderValue, Iterable<[string, number]> {
    #private;
    constructor(init?: string | AcceptEncodingInit);
    /**
     * An array of all encodings in the header.
     */
    get encodings(): string[];
    /**
     * An array of all weights (q values) in the header.
     */
    get weights(): number[];
    /**
     * The number of encodings in the header.
     */
    get size(): number;
    /**
     * Returns `true` if the header matches the given encoding (i.e. it is "acceptable").
     * @param encoding The encoding to check.
     * @returns `true` if the encoding is acceptable, `false` otherwise.
     */
    accepts(encoding: string): boolean;
    /**
     * Gets the weight an encoding. Performs wildcard matching so `*` matches all encodings.
     * @param encoding The encoding to get.
     * @returns The weight of the encoding, or `0` if it is not in the header.
     */
    getWeight(encoding: string): number;
    /**
     * Returns the most preferred encoding from the given list of encodings.
     * @param encodings The encodings to choose from.
     * @returns The most preferred encoding or `null` if none match.
     */
    getPreferred(encodings: string[]): string | null;
    /**
     * Gets the weight of an encoding. If it is not in the header verbatim, this returns `null`.
     * @param encoding The encoding to get.
     * @returns The weight of the encoding, or `null` if it is not in the header.
     */
    get(encoding: string): number | null;
    /**
     * Sets an encoding with the given weight.
     * @param encoding The encoding to set.
     * @param weight The weight of the encoding. Defaults to 1.
     */
    set(encoding: string, weight?: number): void;
    /**
     * Removes the given encoding from the header.
     * @param encoding The encoding to remove.
     */
    delete(encoding: string): void;
    /**
     * Checks if the header contains a given encoding.
     * @param encoding The encoding to check.
     * @returns `true` if the encoding is in the header, `false` otherwise.
     */
    has(encoding: string): boolean;
    /**
     * Removes all encodings from the header.
     */
    clear(): void;
    entries(): IterableIterator<[string, number]>;
    [Symbol.iterator](): IterableIterator<[string, number]>;
    forEach(callback: (encoding: string, weight: number, header: AcceptEncoding) => void, thisArg?: any): void;
    toString(): string;
}

type AcceptLanguageInit = Iterable<string | [string, number]> | Record<string, number>;
/**
 * The value of a `Accept-Language` HTTP header.
 *
 * [MDN `Accept-Language` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language)
 *
 * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.5)
 */
declare class AcceptLanguage implements HeaderValue, Iterable<[string, number]> {
    #private;
    constructor(init?: string | AcceptLanguageInit);
    /**
     * An array of all languages in the header.
     */
    get languages(): string[];
    /**
     * An array of all weights (q values) in the header.
     */
    get weights(): number[];
    /**
     * The number of languages in the header.
     */
    get size(): number;
    /**
     * Returns `true` if the header matches the given language (i.e. it is "acceptable").
     * @param language The locale identifier of the language to check.
     * @returns `true` if the language is acceptable, `false` otherwise.
     */
    accepts(language: string): boolean;
    /**
     * Gets the weight of a language with the given locale identifier. Performs wildcard and subtype
     * matching, so `en` matches `en-US` and `en-GB`, and `*` matches all languages.
     * @param language The locale identifier of the language to get.
     * @returns The weight of the language, or `0` if it is not in the header.
     */
    getWeight(language: string): number;
    /**
     * Returns the most preferred language from the given list of languages.
     * @param languages The locale identifiers of the languages to choose from.
     * @returns The most preferred language or `null` if none match.
     */
    getPreferred(languages: string[]): string | null;
    /**
     * Gets the weight of a language with the given locale identifier. If it is not in the header
     * verbatim, this returns `null`.
     * @param language The locale identifier of the language to get.
     * @returns The weight of the language, or `null` if it is not in the header.
     */
    get(language: string): number | null;
    /**
     * Sets a language with the given weight.
     * @param language The locale identifier of the language to set.
     * @param weight The weight of the language. Defaults to 1.
     */
    set(language: string, weight?: number): void;
    /**
     * Removes a language with the given locale identifier.
     * @param language The locale identifier of the language to remove.
     */
    delete(language: string): void;
    /**
     * Checks if the header contains a language with the given locale identifier.
     * @param language The locale identifier of the language to check.
     * @returns `true` if the language is in the header, `false` otherwise.
     */
    has(language: string): boolean;
    /**
     * Removes all languages from the header.
     */
    clear(): void;
    entries(): IterableIterator<[string, number]>;
    [Symbol.iterator](): IterableIterator<[string, number]>;
    forEach(callback: (language: string, weight: number, header: AcceptLanguage) => void, thisArg?: any): void;
    toString(): string;
}

interface CacheControlInit {
    /**
     * The `max-age=N` **request directive** indicates that the client allows a stored response that
     * is generated on the origin server within _N_ seconds â€” where _N_ may be any non-negative
     * integer (including `0`).
     *
     * The `max-age=N` **response directive** indicates that the response remains
     * [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)
     * until _N_ seconds after the response is generated.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#max-age)
     */
    maxAge?: number;
    /**
     * The `max-stale=N` **request directive** indicates that the client allows a stored response
     * that is [stale](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)
     * within _N_ seconds.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#max-stale)
     */
    maxStale?: number;
    /**
     * The `min-fresh=N` **request directive** indicates that the client allows a stored response
     * that is [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)
     * for at least _N_ seconds.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#min-fresh)
     */
    minFresh?: number;
    /**
     * The `s-maxage` **response directive** also indicates how long the response is
     * [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age) for (similar to `max-age`) â€”
     * but it is specific to shared caches, and they will ignore `max-age` when it is present.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#s-maxage)
     */
    sMaxage?: number;
    /**
     * The `no-cache` **request directive** asks caches to validate the response with the origin
     * server before reuse. If you want caches to always check for content updates while reusing
     * stored content, `no-cache` is the directive to use.
     *
     * The `no-cache` **response directive** indicates that the response can be stored in caches, but
     * the response must be validated with the origin server before each reuse, even when the cache
     * is disconnected from the origin server.
     *
     * `no-cache` allows clients to request the most up-to-date response even if the cache has a
     * [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)
     * response.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#no-cache)
     */
    noCache?: true;
    /**
     * The `no-store` **request directive** allows a client to request that caches refrain from
     * storing the request and corresponding response â€” even if the origin server's response could
     * be stored.
     *
     * The `no-store` **response directive** indicates that any caches of any kind (private or shared)
     * should not store this response.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#no-store)
     */
    noStore?: true;
    /**
     * `no-transform` indicates that any intermediary (regardless of whether it implements a cache)
     * shouldn't transform the response contents.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#no-transform)
     */
    noTransform?: true;
    /**
     * The client indicates that cache should obtain an already-cached response. If a cache has
     * stored a response, it's reused.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#only-if-cached)
     */
    onlyIfCached?: true;
    /**
     * The `must-revalidate` **response directive** indicates that the response can be stored in
     * caches and can be reused while [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age).
     * If the response becomes [stale](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age),
     * it must be validated with the origin server before reuse.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#must-revalidate)
     */
    mustRevalidate?: true;
    /**
     * The `proxy-revalidate` **response directive** is the equivalent of `must-revalidate`, but
     * specifically for shared caches only.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#proxy-revalidate)
     */
    proxyRevalidate?: true;
    /**
     * The `must-understand` **response directive** indicates that a cache should store the response
     * only if it understands the requirements for caching based on status code.
     *
     * `must-understand` should be coupled with `no-store` for fallback behavior.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#must-understand)
     */
    mustUnderstand?: true;
    /**
     * The `private` **response directive** indicates that the response can be stored only in a
     * private cache (e.g. local caches in browsers).
     *
     * You should add the `private` directive for user-personalized content, especially for responses
     * received after login and for sessions managed via cookies.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#private)
     */
    private?: true;
    /**
     * The `public` **response directive** indicates that the response can be stored in a shared
     * cache. Responses for requests with `Authorization` header fields must not be stored in a
     * shared cache; however, the `public` directive will cause such responses to be stored in a
     * shared cache.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#public)
     */
    public?: true;
    /**
     * The `immutable` **response directive** indicates that the response will not be updated while
     * it's [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age).
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#public)
     */
    immutable?: true;
    /**
     * The `stale-while-revalidate` **response directive** indicates that the cache could reuse a
     * stale response while it revalidates it to a cache.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#stale-while-revalidate)
     */
    staleWhileRevalidate?: number;
    /**
     * The `stale-if-error` **response directive** indicates that the cache can reuse a
     * [stale response](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)
     * when an upstream server generates an error, or when the error is generated locally. Here, an
     * error is considered any response with a status code of 500, 502, 503, or 504.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#stale-if-error)
     */
    staleIfError?: number;
}
/**
 * The value of a `Cache-Control` HTTP header.
 *
 * [MDN `Cache-Control` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)
 *
 * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7234#section-5.2)
 */
declare class CacheControl implements HeaderValue, CacheControlInit {
    maxAge?: number;
    maxStale?: number;
    minFresh?: number;
    sMaxage?: number;
    noCache?: true;
    noStore?: true;
    noTransform?: true;
    onlyIfCached?: true;
    mustRevalidate?: true;
    proxyRevalidate?: true;
    mustUnderstand?: true;
    private?: true;
    public?: true;
    immutable?: true;
    staleWhileRevalidate?: number;
    staleIfError?: number;
    constructor(init?: string | CacheControlInit);
    toString(): string;
}

interface ContentDispositionInit {
    /**
     * For file uploads, the name of the file that the user selected.
     */
    filename?: string;
    /**
     * For file uploads, the name of the file that the user selected, encoded as a [RFC 8187](https://tools.ietf.org/html/rfc8187) `filename*` parameter.
     * This parameter allows non-ASCII characters in filenames, and specifies the character encoding.
     */
    filenameSplat?: string;
    /**
     * For `multipart/form-data` requests, the name of the `<input>` field associated with this content.
     */
    name?: string;
    /**
     * The disposition type of the content, such as `attachment` or `inline`.
     */
    type?: string;
}
/**
 * The value of a `Content-Disposition` HTTP header.
 *
 * [MDN `Content-Disposition` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)
 *
 * [RFC 6266](https://tools.ietf.org/html/rfc6266)
 */
declare class ContentDisposition implements HeaderValue, ContentDispositionInit {
    filename?: string;
    filenameSplat?: string;
    name?: string;
    type?: string;
    constructor(init?: string | ContentDispositionInit);
    /**
     * The preferred filename for the content, using the `filename*` parameter if present, falling back to the `filename` parameter.
     *
     * From [RFC 6266](https://tools.ietf.org/html/rfc6266):
     *
     * Many user agent implementations predating this specification do not understand the "filename*" parameter.
     * Therefore, when both "filename" and "filename*" are present in a single header field value, recipients SHOULD
     * pick "filename*" and ignore "filename". This way, senders can avoid special-casing specific user agents by
     * sending both the more expressive "filename*" parameter, and the "filename" parameter as fallback for legacy recipients.
     */
    get preferredFilename(): string | undefined;
    toString(): string;
}

interface ContentTypeInit {
    /**
     * For multipart entities, the boundary that separates the different parts of the message.
     */
    boundary?: string;
    /**
     * Indicates the [character encoding](https://developer.mozilla.org/en-US/docs/Glossary/Character_encoding) of the content.
     *
     * For example, `utf-8`, `iso-8859-1`.
     */
    charset?: string;
    /**
     * The media type (or MIME type) of the content. This consists of a type and subtype, separated by a slash.
     *
     * For example, `text/html`, `application/json`, `image/png`.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)
     */
    mediaType?: string;
}
/**
 * The value of a `Content-Type` HTTP header.
 *
 * [MDN `Content-Type` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type)
 *
 * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-3.1.1.5)
 */
declare class ContentType implements HeaderValue, ContentTypeInit {
    boundary?: string;
    charset?: string;
    mediaType?: string;
    constructor(init?: string | ContentTypeInit);
    toString(): string;
}

type CookieInit = Iterable<[string, string]> | Record<string, string>;
/**
 * The value of a `Cookie` HTTP header.
 *
 * [MDN `Cookie` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie)
 *
 * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc6265#section-4.2)
 */
declare class Cookie implements HeaderValue, Iterable<[string, string]> {
    #private;
    constructor(init?: string | CookieInit);
    /**
     * An array of the names of the cookies in the header.
     */
    get names(): string[];
    /**
     * An array of the values of the cookies in the header.
     */
    get values(): string[];
    /**
     * The number of cookies in the header.
     */
    get size(): number;
    /**
     * Gets the value of a cookie with the given name from the header.
     * @param name The name of the cookie.
     * @returns The value of the cookie, or `null` if the cookie does not exist.
     */
    get(name: string): string | null;
    /**
     * Sets a cookie with the given name and value in the header.
     * @param name The name of the cookie.
     * @param value The value of the cookie.
     */
    set(name: string, value: string): void;
    /**
     * Removes a cookie with the given name from the header.
     * @param name The name of the cookie.
     */
    delete(name: string): void;
    /**
     * True if a cookie with the given name exists in the header.
     * @param name The name of the cookie.
     * @returns True if a cookie with the given name exists in the header.
     */
    has(name: string): boolean;
    /**
     * Removes all cookies from the header.
     */
    clear(): void;
    entries(): IterableIterator<[string, string]>;
    [Symbol.iterator](): IterableIterator<[string, string]>;
    forEach(callback: (name: string, value: string, header: Cookie) => void, thisArg?: any): void;
    toString(): string;
}

interface IfNoneMatchInit {
    /**
     * The entity tags to compare against the current entity.
     */
    tags: string[];
}
/**
 * The value of an `If-None-Match` HTTP header.
 *
 * [MDN `If-None-Match` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match)
 *
 * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7232#section-3.2)
 */
declare class IfNoneMatch implements HeaderValue, IfNoneMatchInit {
    tags: string[];
    constructor(init?: string | string[] | IfNoneMatchInit);
    /**
     * Checks if the header contains the given entity tag.
     *
     * Note: This method checks only for exact matches and does not consider wildcards.
     *
     * @param tag The entity tag to check for.
     * @returns `true` if the tag is present in the header, `false` otherwise.
     */
    has(tag: string): boolean;
    /**
     * Checks if this header matches the given entity tag.
     *
     * @param tag The entity tag to check for.
     * @returns `true` if the tag is present in the header (or the header contains a wildcard), `false` otherwise.
     */
    matches(tag: string): boolean;
    toString(): string;
}

type SameSiteValue = 'Strict' | 'Lax' | 'None';
interface SetCookieInit {
    /**
     * The domain of the cookie. For example, `example.com`.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#domaindomain-value)
     */
    domain?: string;
    /**
     * The expiration date of the cookie. If not specified, the cookie is a session cookie.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#expiresdate)
     */
    expires?: Date;
    /**
     * Indicates this cookie should not be accessible via JavaScript.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#httponly)
     */
    httpOnly?: true;
    /**
     * The maximum age of the cookie in seconds.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#max-age)
     */
    maxAge?: number;
    /**
     * The name of the cookie.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#cookie-namecookie-value)
     */
    name?: string;
    /**
     * The path of the cookie. For example, `/` or `/admin`.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#pathpath-value)
     */
    path?: string;
    /**
     * The `SameSite` attribute of the cookie. This attribute lets servers require that a cookie shouldn't be sent with
     * cross-site requests, which provides some protection against cross-site request forgery attacks.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value)
     */
    sameSite?: SameSiteValue;
    /**
     * Indicates the cookie should only be sent over HTTPS.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#secure)
     */
    secure?: true;
    /**
     * The value of the cookie.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#cookie-namecookie-value)
     */
    value?: string;
}
/**
 * The value of a `Set-Cookie` HTTP header.
 *
 * [MDN `Set-Cookie` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie)
 *
 * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1)
 */
declare class SetCookie implements HeaderValue, SetCookieInit {
    domain?: string;
    expires?: Date;
    httpOnly?: true;
    maxAge?: number;
    name?: string;
    path?: string;
    sameSite?: SameSiteValue;
    secure?: true;
    value?: string;
    constructor(init?: string | SetCookieInit);
    toString(): string;
}

type DateInit = number | Date;
interface SuperHeadersPropertyInit {
    /**
     * The [`Accept`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept) header value.
     */
    accept?: string | AcceptInit;
    /**
     * The [`Accept-Encoding`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding) header value.
     */
    acceptEncoding?: string | AcceptEncodingInit;
    /**
     * The [`Accept-Language`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) header value.
     */
    acceptLanguage?: string | AcceptLanguageInit;
    /**
     * The [`Accept-Ranges`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Ranges) header value.
     */
    acceptRanges?: string;
    /**
     * The [`Age`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Age) header value.
     */
    age?: string | number;
    /**
     * The [`Cache-Control`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) header value.
     */
    cacheControl?: string | CacheControlInit;
    /**
     * The [`Connection`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection) header value.
     */
    connection?: string;
    /**
     * The [`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) header value.
     */
    contentDisposition?: string | ContentDispositionInit;
    /**
     * The [`Content-Encoding`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding) header value.
     */
    contentEncoding?: string | string[];
    /**
     * The [`Content-Language`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language) header value.
     */
    contentLanguage?: string | string[];
    /**
     * The [`Content-Length`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length) header value.
     */
    contentLength?: string | number;
    /**
     * The [`Content-Type`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) header value.
     */
    contentType?: string | ContentTypeInit;
    /**
     * The [`Cookie`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie) header value.
     */
    cookie?: string | CookieInit;
    /**
     * The [`Date`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date) header value.
     */
    date?: string | DateInit;
    /**
     * The [`ETag`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) header value.
     */
    etag?: string;
    /**
     * The [`Expires`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires) header value.
     */
    expires?: string | DateInit;
    /**
     * The [`Host`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host) header value.
     */
    host?: string;
    /**
     * The [`If-Modified-Since`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since) header value.
     */
    ifModifiedSince?: string | DateInit;
    /**
     * The [`If-None-Match`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) header value.
     */
    ifNoneMatch?: string | string[] | IfNoneMatchInit;
    /**
     * The [`If-Unmodified-Since`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since) header value.
     */
    ifUnmodifiedSince?: string | DateInit;
    /**
     * The [`Last-Modified`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified) header value.
     */
    lastModified?: string | DateInit;
    /**
     * The [`Location`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Location) header value.
     */
    location?: string;
    /**
     * The [`Referer`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) header value.
     */
    referer?: string;
    /**
     * The [`Set-Cookie`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) header value(s).
     */
    setCookie?: string | (string | SetCookieInit)[];
}
type SuperHeadersInit = Iterable<[string, string]> | (SuperHeadersPropertyInit & Record<string, string | HeaderValue>);
/**
 * An enhanced JavaScript `Headers` interface with type-safe access.
 *
 * [API Reference](https://github.com/mjackson/remix-the-web/tree/main/packages/headers)
 *
 * [MDN `Headers` Base Class Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers)
 */
declare class SuperHeaders extends Headers {
    #private;
    constructor(init?: string | SuperHeadersInit | Headers);
    /**
     * Appends a new header value to the existing set of values for a header,
     * or adds the header if it does not already exist.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/append)
     */
    append(name: string, value: string): void;
    /**
     * Removes a header.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/delete)
     */
    delete(name: string): void;
    /**
     * Returns a string of all the values for a header, or `null` if the header does not exist.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/get)
     */
    get(name: string): string | null;
    /**
     * Returns an array of all values associated with the `Set-Cookie` header. This is
     * useful when building headers for a HTTP response since multiple `Set-Cookie` headers
     * must be sent on separate lines.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/getSetCookie)
     */
    getSetCookie(): string[];
    /**
     * Returns `true` if the header is present in the list of headers.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/has)
     */
    has(name: string): boolean;
    /**
     * Sets a new value for the given header. If the header already exists, the new value
     * will replace the existing value.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/set)
     */
    set(name: string, value: string): void;
    /**
     * Returns an iterator of all header keys (lowercase).
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/keys)
     */
    keys(): IterableIterator<string>;
    /**
     * Returns an iterator of all header values.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/values)
     */
    values(): IterableIterator<string>;
    /**
     * Returns an iterator of all header key/value pairs.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/entries)
     */
    entries(): IterableIterator<[string, string]>;
    [Symbol.iterator](): IterableIterator<[string, string]>;
    /**
     * Invokes the `callback` for each header key/value pair.
     *
     * [MDN Reference](https://developer.mozilla.org/en-US/docs/Web/API/Headers/forEach)
     */
    forEach(callback: (value: string, key: string, headers: SuperHeaders) => void, thisArg?: any): void;
    /**
     * Returns a string representation of the headers suitable for use in a HTTP message.
     */
    toString(): string;
    /**
     * The `Accept` header is used by clients to indicate the media types that are acceptable
     * in the response.
     *
     * [MDN `Accept` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2)
     */
    get accept(): Accept;
    set accept(value: string | AcceptInit | undefined | null);
    /**
     * The `Accept-Encoding` header contains information about the content encodings that the client
     * is willing to accept in the response.
     *
     * [MDN `Accept-Encoding` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.4)
     */
    get acceptEncoding(): AcceptEncoding;
    set acceptEncoding(value: string | AcceptEncodingInit | undefined | null);
    /**
     * The `Accept-Language` header contains information about preferred natural language for the
     * response.
     *
     * [MDN `Accept-Language` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.5)
     */
    get acceptLanguage(): AcceptLanguage;
    set acceptLanguage(value: string | AcceptLanguageInit | undefined | null);
    /**
     * The `Accept-Ranges` header indicates the server's acceptance of range requests.
     *
     * [MDN `Accept-Ranges` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Ranges)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7233#section-2.3)
     */
    get acceptRanges(): string | null;
    set acceptRanges(value: string | undefined | null);
    /**
     * The `Age` header contains the time in seconds an object was in a proxy cache.
     *
     * [MDN `Age` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Age)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7234#section-5.1)
     */
    get age(): number | null;
    set age(value: string | number | undefined | null);
    /**
     * The `Cache-Control` header contains directives for caching mechanisms in both requests and responses.
     *
     * [MDN `Cache-Control` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7234#section-5.2)
     */
    get cacheControl(): CacheControl;
    set cacheControl(value: string | CacheControlInit | undefined | null);
    /**
     * The `Connection` header controls whether the network connection stays open after the current
     * transaction finishes.
     *
     * [MDN `Connection` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7230#section-6.1)
     */
    get connection(): string | null;
    set connection(value: string | undefined | null);
    /**
     * The `Content-Disposition` header is a response-type header that describes how the payload is displayed.
     *
     * [MDN `Content-Disposition` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition)
     *
     * [RFC 6266](https://datatracker.ietf.org/doc/html/rfc6266)
     */
    get contentDisposition(): ContentDisposition;
    set contentDisposition(value: string | ContentDispositionInit | undefined | null);
    /**
     * The `Content-Encoding` header specifies the encoding of the resource.
     *
     * Note: If multiple encodings have been used, this value may be a comma-separated list. However, most often this
     * header will only contain a single value.
     *
     * [MDN `Content-Encoding` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding)
     *
     * [HTTP/1.1 Specification](https://httpwg.org/specs/rfc9110.html#field.content-encoding)
     */
    get contentEncoding(): string | null;
    set contentEncoding(value: string | string[] | undefined | null);
    /**
     * The `Content-Language` header describes the natural language(s) of the intended audience for the response content.
     *
     * Note: If the response content is intended for multiple audiences, this value may be a comma-separated list. However,
     * most often this header will only contain a single value.
     *
     * [MDN `Content-Language` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language)
     *
     * [HTTP/1.1 Specification](https://httpwg.org/specs/rfc9110.html#field.content-language)
     */
    get contentLanguage(): string | null;
    set contentLanguage(value: string | string[] | undefined | null);
    /**
     * The `Content-Length` header indicates the size of the entity-body in bytes.
     *
     * [MDN `Content-Length` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2)
     */
    get contentLength(): number | null;
    set contentLength(value: string | number | undefined | null);
    /**
     * The `Content-Type` header indicates the media type of the resource.
     *
     * [MDN `Content-Type` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-3.1.1.5)
     */
    get contentType(): ContentType;
    set contentType(value: string | ContentTypeInit | undefined | null);
    /**
     * The `Cookie` request header contains stored HTTP cookies previously sent by the server with
     * the `Set-Cookie` header.
     *
     * [MDN `Cookie` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc6265#section-5.4)
     */
    get cookie(): Cookie;
    set cookie(value: string | CookieInit | undefined | null);
    /**
     * The `Date` header contains the date and time at which the message was sent.
     *
     * [MDN `Date` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.1.2)
     */
    get date(): Date | null;
    set date(value: string | DateInit | undefined | null);
    /**
     * The `ETag` header provides a unique identifier for the current version of the resource.
     *
     * [MDN `ETag` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7232#section-2.3)
     */
    get etag(): string | null;
    set etag(value: string | undefined | null);
    /**
     * The `Expires` header contains the date/time after which the response is considered stale.
     *
     * [MDN `Expires` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7234#section-5.3)
     */
    get expires(): Date | null;
    set expires(value: string | DateInit | undefined | null);
    /**
     * The `Host` header specifies the domain name of the server and (optionally) the TCP port number.
     *
     * [MDN `Host` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7230#section-5.4)
     */
    get host(): string | null;
    set host(value: string | undefined | null);
    /**
     * The `If-Modified-Since` header makes a request conditional on the last modification date of the
     * requested resource.
     *
     * [MDN `If-Modified-Since` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7232#section-3.3)
     */
    get ifModifiedSince(): Date | null;
    set ifModifiedSince(value: string | DateInit | undefined | null);
    /**
     * The `If-None-Match` header makes a request conditional on the absence of a matching ETag.
     *
     * [MDN `If-None-Match` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7232#section-3.2)
     */
    get ifNoneMatch(): IfNoneMatch;
    set ifNoneMatch(value: string | string[] | IfNoneMatchInit | undefined | null);
    /**
     * The `If-Unmodified-Since` header makes a request conditional on the last modification date of the
     * requested resource.
     *
     * [MDN `If-Unmodified-Since` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7232#section-3.4)
     */
    get ifUnmodifiedSince(): Date | null;
    set ifUnmodifiedSince(value: string | DateInit | undefined | null);
    /**
     * The `Last-Modified` header contains the date and time at which the resource was last modified.
     *
     * [MDN `Last-Modified` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7232#section-2.2)
     */
    get lastModified(): Date | null;
    set lastModified(value: string | DateInit | undefined | null);
    /**
     * The `Location` header indicates the URL to redirect to.
     *
     * [MDN `Location` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Location)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.2)
     */
    get location(): string | null;
    set location(value: string | undefined | null);
    /**
     * The `Referer` header contains the address of the previous web page from which a link to the
     * currently requested page was followed.
     *
     * [MDN `Referer` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc7231#section-5.5.2)
     */
    get referer(): string | null;
    set referer(value: string | undefined | null);
    /**
     * The `Set-Cookie` header is used to send cookies from the server to the user agent.
     *
     * [MDN `Set-Cookie` Reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie)
     *
     * [HTTP/1.1 Specification](https://datatracker.ietf.org/doc/html/rfc6265#section-4.1)
     */
    get setCookie(): SetCookie[];
    set setCookie(value: (string | SetCookieInit)[] | string | SetCookieInit | undefined | null);
}

export { Accept, AcceptEncoding, type AcceptEncodingInit, type AcceptInit, AcceptLanguage, type AcceptLanguageInit, CacheControl, type CacheControlInit, ContentDisposition, type ContentDispositionInit, ContentType, type ContentTypeInit, Cookie, type CookieInit, IfNoneMatch, type IfNoneMatchInit, SetCookie, type SetCookieInit, SuperHeaders, type SuperHeadersInit, SuperHeaders as default };
