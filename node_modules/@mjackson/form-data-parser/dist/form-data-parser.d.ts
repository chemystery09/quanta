import { MultipartPart, MultipartParserOptions } from '@mjackson/multipart-parser';

/**
 * A file that was uploaded as part of a `multipart/form-data` request.
 *
 * This object is intended to be used as an intermediary for handling file uploads. The file should
 * be saved to disk or a cloud storage service as quickly as possible to avoid buffering and
 * backpressure building up in the input stream.
 *
 * Note: Although `FileUpload` implements the [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File)
 * interface, its `size` is unknown, so any attempt to access `file.size` or use `file.slice()` will
 * throw an error.
 */
declare class FileUpload implements File {
    #private;
    readonly name: string;
    readonly type: string;
    readonly lastModified: number;
    readonly webkitRelativePath = "";
    constructor(part: MultipartPart);
    arrayBuffer(): Promise<ArrayBuffer>;
    bytes(): Promise<Uint8Array>;
    /**
     * The name of the <input> field used to upload the file.
     */
    get fieldName(): string | undefined;
    get size(): number;
    slice(): Blob;
    stream(): ReadableStream<Uint8Array>;
    text(): Promise<string>;
}
/**
 * A function used for handling file uploads.
 */
interface FileUploadHandler {
    (file: FileUpload): void | null | string | Blob | Promise<void | null | string | Blob>;
}
/**
 * Parses a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) body into a [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)
 * object. This is useful when accessing the data contained in a HTTP `multipart/form-data` request
 * generated by a HTML `<form>` element.
 *
 * The main difference between this function and using [the built-in `request.formData()` API](https://developer.mozilla.org/en-US/docs/Web/API/Request/formData)
 * is the ability to customize the handling of file uploads. Instead of buffering the entire file in
 * memory, the `uploadHandler` allows you to stream the file to disk or a cloud storage service.
 */
declare function parseFormData(request: Request, handler?: FileUploadHandler): Promise<FormData>;
declare function parseFormData(request: Request, parserOptions: MultipartParserOptions, handler?: FileUploadHandler): Promise<FormData>;

export { FileUpload, type FileUploadHandler, parseFormData };
