// src/lib/form-data.ts
import {
  isMultipartRequest,
  parseMultipartRequest
} from "@mjackson/multipart-parser";
var FileUpload = class {
  name;
  type;
  lastModified;
  webkitRelativePath = "";
  #part;
  constructor(part) {
    this.name = part.filename ?? "";
    this.type = part.mediaType ?? "";
    this.lastModified = Date.now();
    this.#part = part;
  }
  arrayBuffer() {
    return this.#part.arrayBuffer();
  }
  bytes() {
    return this.#part.bytes();
  }
  /**
   * The name of the <input> field used to upload the file.
   */
  get fieldName() {
    return this.#part.name;
  }
  get size() {
    throw new Error("Cannot get the size of a file upload without buffering the entire file");
  }
  slice() {
    throw new Error("Cannot slice a file upload without buffering the entire file");
  }
  stream() {
    return this.#part.body;
  }
  text() {
    return this.#part.text();
  }
};
async function defaultFileUploadHandler(file) {
  let buffer = await file.arrayBuffer();
  return new File([buffer], file.name, { type: file.type, lastModified: file.lastModified });
}
async function parseFormData(request, parserOptions, handler = defaultFileUploadHandler) {
  if (typeof parserOptions === "function") {
    handler = parserOptions;
    parserOptions = {};
  } else if (parserOptions == null) {
    parserOptions = {};
  }
  if (!isMultipartRequest(request)) {
    return request.formData();
  }
  let formData = new FormData();
  await parseMultipartRequest(request, parserOptions, async (part) => {
    let fieldName = part.name;
    if (!fieldName) return;
    if (part.isFile) {
      let value = await handler(new FileUpload(part));
      if (value != null) {
        formData.append(fieldName, value);
      }
    } else {
      formData.append(fieldName, await part.text());
    }
  });
  return formData;
}
export {
  FileUpload,
  parseFormData
};
