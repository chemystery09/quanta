"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/form-data-parser.ts
var form_data_parser_exports = {};
__export(form_data_parser_exports, {
  FileUpload: () => FileUpload,
  parseFormData: () => parseFormData
});
module.exports = __toCommonJS(form_data_parser_exports);

// src/lib/form-data.ts
var import_multipart_parser = require("@mjackson/multipart-parser");
var FileUpload = class {
  name;
  type;
  lastModified;
  webkitRelativePath = "";
  #part;
  constructor(part) {
    this.name = part.filename ?? "";
    this.type = part.mediaType ?? "";
    this.lastModified = Date.now();
    this.#part = part;
  }
  arrayBuffer() {
    return this.#part.arrayBuffer();
  }
  bytes() {
    return this.#part.bytes();
  }
  /**
   * The name of the <input> field used to upload the file.
   */
  get fieldName() {
    return this.#part.name;
  }
  get size() {
    throw new Error("Cannot get the size of a file upload without buffering the entire file");
  }
  slice() {
    throw new Error("Cannot slice a file upload without buffering the entire file");
  }
  stream() {
    return this.#part.body;
  }
  text() {
    return this.#part.text();
  }
};
async function defaultFileUploadHandler(file) {
  let buffer = await file.arrayBuffer();
  return new File([buffer], file.name, { type: file.type, lastModified: file.lastModified });
}
async function parseFormData(request, parserOptions, handler = defaultFileUploadHandler) {
  if (typeof parserOptions === "function") {
    handler = parserOptions;
    parserOptions = {};
  } else if (parserOptions == null) {
    parserOptions = {};
  }
  if (!(0, import_multipart_parser.isMultipartRequest)(request)) {
    return request.formData();
  }
  let formData = new FormData();
  await (0, import_multipart_parser.parseMultipartRequest)(request, parserOptions, async (part) => {
    let fieldName = part.name;
    if (!fieldName) return;
    if (part.isFile) {
      let value = await handler(new FileUpload(part));
      if (value != null) {
        formData.append(fieldName, value);
      }
    } else {
      formData.append(fieldName, await part.text());
    }
  });
  return formData;
}
